name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '0 10 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    services:
      mariadb:
        image: mariadb
        env:
          MARIADB_ROOT_PASSWORD: 1
          MARIADB_DATABASE: file_transfer
        ports:
          - 3306/tcp
      redis:
        image: redis
        ports:
          - 6379/tcp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      #- name: Install cosign
      #  if: github.event_name != 'pull_request'
      #  uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
      #  with:
      #    cosign-release: 'v1.9.0'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
        id: buildx

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          build-args: |
            ZEITHROLD_MYSQL_HOST=172.17.0.1
            ZEITHROLD_MYSQL_USERNAME=root
            ZEITHROLD_MYSQL_PASSWORD=1
            ZEITHROLD_MYSQL_PORT=3306
            ZEITHROLD_MYSQL_DATABASE=file_transfer
            ZEITHROLD_REDIS_URI=redis://172.17.0.1
            ZEITHROLD_OIDC_ISSUER=https://auth.zeithrold.com
            ZEITHROLD_OIDC_CLIENT_ID=${{ secrets.ZEITHROLD_OIDC_CLIENT_ID }}
            ZEITHROLD_OIDC_CLIENT_SECERT=${{ secrets.ZEITHROLD_OIDC_CLIENT_SECERT }}
            ZEITHROLD_ENDPOINT=https://file.zeithrold.cloud
            ZEITHROLD_ALIYUN_STS_ACCESSKEY_ID=${{ secrets.ZEITHROLD_ALIYUN_STS_ACCESSKEY_ID }}
            ZEITHROLD_ALIYUN_STS_ACCESSKEY_SECRET=${{ secrets.ZEITHROLD_ALIYUN_STS_ACCESSKEY_SECRET }}
            ZEITHROLD_ALIYUN_OSS_REGION=${{ secrets.ZEITHROLD_ALIYUN_OSS_REGION }}
            ZEITHROLD_ALIYUN_OSS_BUCKET=${{ secrets.ZEITHROLD_ALIYUN_OSS_BUCKET }}
            ZEITHROLD_ALIYUN_OSS_ENDPOINT=${{ secrets.ZEITHROLD_ALIYUN_OSS_ENDPOINT }}
            ZEITHROLD_ALIYUN_OSS_ACCESSKEY_ID=${{ secrets.ZEITHROLD_ALIYUN_OSS_ACCESSKEY_ID }}
            ZEITHROLD_ALIYUN_OSS_ACCESSKEY_SECRET=${{ secrets.ZEITHROLD_ALIYUN_OSS_ACCESSKEY_SECRET }}

          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
