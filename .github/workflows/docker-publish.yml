name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '0 10 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    strategy:
      matrix:
        registry: [ghcr.io, registry.cn-beijing.aliyuncs.com, swr.cn-north-4.myhuaweicloud.com]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    services:
      mariadb:
        image: mariadb
        env:
          MARIADB_ROOT_PASSWORD: 1
          MARIADB_DATABASE: file_transfer
        ports:
          - 3306:3306
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      #- name: Install cosign
      #  if: github.event_name != 'pull_request'
      #  uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
      #  with:
      #    cosign-release: 'v1.9.0'
      
      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@39a1a82492fd1ad19af19d61b5f748e4cb6cd1af
        id: buildx
        with:
          driver-opts: |
            network=host

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ghcr.io
        if: ${{ github.event_name != 'pull_request' && matrix.registry == 'ghcr.io' }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into registry registry.cn-beijing.aliyuncs.com
        if: ${{ matrix.registry == 'registry.cn-beijing.aliyuncs.com' }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ZEITHROLD_ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ZEITHROLD_ALIYUN_ACR_PASSWORD }}
      
      - name: Log into registry Huawei Cloud
        if: ${{ github.event_name != 'pull_request' && matrix.registry == 'swr.cn-north-4.myhuaweicloud.com' }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: swr.cn-north-4.myhuaweicloud.com
          username: cn-north-4@${{ secrets.ZEITHROLD_HUAWEI_ACCESSKEY_ID }}
          password: ${{ secrets.ZEITHROLD_HUAWEI_ACCESSKEY_SECRET }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: ${{ matrix.registry }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@175d02bffea74695e96b351069ac938b338802f9
        with:
          network: host
          build-args: |
            ZEITHROLD_MYSQL_HOST=localhost
            ZEITHROLD_MYSQL_USERNAME=root
            ZEITHROLD_MYSQL_PASSWORD=1
            ZEITHROLD_MYSQL_PORT=3306
            ZEITHROLD_MYSQL_DATABASE=file_transfer
            ZEITHROLD_REDIS_URI=redis://localhost
            ZEITHROLD_OIDC_ISSUER=https://auth.zeithrold.com
            ZEITHROLD_OIDC_CLIENT_ID=${{ secrets.ZEITHROLD_OIDC_CLIENT_ID }}
            ZEITHROLD_OIDC_CLIENT_SECERT=${{ secrets.ZEITHROLD_OIDC_CLIENT_SECERT }}
            ZEITHROLD_ENDPOINT=https://file.zeithrold.cloud
            ZEITHROLD_ALIYUN_STS_ACCESSKEY_ID=${{ secrets.ZEITHROLD_ALIYUN_STS_ACCESSKEY_ID }}
            ZEITHROLD_ALIYUN_STS_ACCESSKEY_SECRET=${{ secrets.ZEITHROLD_ALIYUN_STS_ACCESSKEY_SECRET }}
            ZEITHROLD_ALIYUN_OSS_REGION=${{ secrets.ZEITHROLD_ALIYUN_OSS_REGION }}
            ZEITHROLD_ALIYUN_OSS_BUCKET=${{ secrets.ZEITHROLD_ALIYUN_OSS_BUCKET }}
            ZEITHROLD_ALIYUN_OSS_ENDPOINT=${{ secrets.ZEITHROLD_ALIYUN_OSS_ENDPOINT }}
            ZEITHROLD_ALIYUN_OSS_ACCESSKEY_ID=${{ secrets.ZEITHROLD_ALIYUN_OSS_ACCESSKEY_ID }}
            ZEITHROLD_ALIYUN_OSS_ACCESSKEY_SECRET=${{ secrets.ZEITHROLD_ALIYUN_OSS_ACCESSKEY_SECRET }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
